{"version":3,"sources":["components/chose-level/chose-level.module.scss","components/finish-game/finish-game.module.scss","components/intro-header/intro-header.module.scss","components/counter/counter.module.scss","components/card/card.module.scss","components/highscores/highscores.module.scss","components/game-in-progress/game-in-progress.module.scss","components/card/card.tsx","components/chose-level/chose-level.tsx","components/highscores/highscores.tsx","components/counter/counter.tsx","components/game-in-progress/game-in-progress.tsx","components/intro-header/into-header.tsx","components/finish-game/finish-game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Card","isDisabled","clickOnCard","showImage","imgID","type","className","styles","wrapper","disabled","onClick","img","src","alt","loader","backSide","ChoseLevel","ClickOnThis","customWindow","changeCount","rowCount","colCount","okCustomClick","window","title","button","id","customInputsWrapper","input","value","onChange","buttonOk","HighscoreTable","Data","map","score","index","name","grid","time","moves","toString","Counter","moveCounter","timeCounter","showGameTime","text","GameInProgress","clickedSetUpGame","IntroHeader","startGameClick","choseLevelClick","extraTitle","buttonStart","FinishGame","clickedReturn","clickedSave","inputFieldRef","content","smallWrapper","smallText","ref","saveButton","bigButton","firstClickedIndex","secondClickedIndex","firstClickedPairIdentificator","secondClickedPairIdentificator","gameCards","fieldSize","movesCount","gameTimeFinish","savedName","MemoryApp","useState","clickedFirstCard","setClickedFirstCard","setRowCount","columnCount","setColumnCount","showChooseLevelWindow","setShowChooseLevelWindow","showCustomLevelInputs","setShowCustomLevelInputs","showGameField","setShowGameField","showIntroHeader","setShowIntroHeader","showGameInProgressHeader","setShowGameInProgressHeader","counter","setCounter","showFinishGameWindow","setShowFinishGameWindow","highScores","setHighScores","saveNameInputField","useRef","useEffect","timer","setInterval","clearInterval","tempPairIDindex","pairIDsArray","i","push","tempHelperNumber","Math","floor","random","uuidv4","pairID","imgSide","splice","flexBasisValue","current","updated","sort","prev","next","length","event","buttonID","target","count","parseInt","card","style","flexBasis","clickedCard","some","clickCardHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f3201ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"window\":\"chose-level_window__3SmUC\",\"title\":\"chose-level_title__3YUMZ\",\"wrapper\":\"chose-level_wrapper__8NjXC\",\"customInputsWrapper\":\"chose-level_customInputsWrapper__28WKX\",\"buttonOk\":\"chose-level_buttonOk__gQS-0\",\"button\":\"chose-level_button__gslc6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"finish-game_wrapper__XtwGu\",\"content\":\"finish-game_content__Bt1AF\",\"smallWrapper\":\"finish-game_smallWrapper__3V7hw\",\"smallText\":\"finish-game_smallText__3qR--\",\"input\":\"finish-game_input__3Kqvi\",\"saveButton\":\"finish-game_saveButton__GvC1-\",\"bigButton\":\"finish-game_bigButton__2a97O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"intro-header_wrapper__1Awkt\",\"title\":\"intro-header_title__1A02U\",\"button\":\"intro-header_button__1comL\",\"buttonStart\":\"intro-header_buttonStart__1EBw0\",\"extraTitle\":\"intro-header_extraTitle__18JDl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"counter_wrapper__3-z-f\",\"text\":\"counter_text__ly9Au\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__3KLxa\",\"wrapper\":\"card_wrapper__rNoad\",\"img\":\"card_img__2fUjj\",\"backSide\":\"card_backSide__1yzn1\",\"loader\":\"card_loader__2uh2I\",\"spin\":\"card_spin__3x2-C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"highscores_wrapper__3aTmG\",\"text\":\"highscores_text__31SPu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"game-in-progress_wrapper__2fgzD\",\"button\":\"game-in-progress_button__3s6O4\"};","import React, { FC } from 'react';\r\nimport styles from './card.module.scss';\r\n\r\ntype Props = {\r\n  isDisabled: boolean;\r\n  clickOnCard: () => void;\r\n  showImage: boolean;\r\n  imgID: number;\r\n};\r\n\r\nexport const Card: FC<Props> = ({\r\n  isDisabled,\r\n  clickOnCard,\r\n  showImage,\r\n  imgID,\r\n}) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={styles.wrapper}\r\n      disabled={isDisabled}\r\n      onClick={clickOnCard}\r\n    >\r\n      {showImage ? (\r\n        <>\r\n          <img\r\n            className={styles.img}\r\n            src={`https://picsum.photos/id/${imgID * 2 + 15}/250/250`}\r\n            alt={`Attēls Nr:  ${imgID}`}\r\n          />\r\n          <div className={styles.loader}> </div>\r\n        </>\r\n      ) : (\r\n        <div className={styles.backSide} />\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { FC } from 'react';\r\nimport styles from './chose-level.module.scss';\r\n\r\ntype Props = {\r\n  ClickOnThis: (event: React.MouseEvent<HTMLElement>) => void;\r\n  customWindow: boolean;\r\n  changeCount: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  rowCount: number;\r\n  colCount: number;\r\n  okCustomClick: () => void;\r\n};\r\n\r\nexport const ChoseLevel: FC<Props> = ({\r\n  ClickOnThis,\r\n  customWindow,\r\n  changeCount,\r\n  rowCount,\r\n  colCount,\r\n  okCustomClick,\r\n}) => {\r\n  return (\r\n    <div className={styles.window}>\r\n      <div className={styles.title}>Choose Dificulty</div>\r\n      <div className={styles.wrapper}>\r\n        <button\r\n          className={styles.button}\r\n          id=\"4\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Easy 4x4\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          id=\"6\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Medium 6x6\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          id=\"8\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Hard 8x8\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          id=\"0\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Custom\r\n        </button>\r\n      </div>\r\n      {customWindow && (\r\n        <div className={styles.customInputsWrapper}>\r\n          <span> Rindu skaits: </span>\r\n          <input\r\n            type=\"number\"\r\n            className={styles.input}\r\n            value={rowCount}\r\n            id=\"row\"\r\n            onChange={changeCount}\r\n          />\r\n          <span> Kolonnu skaits: </span>\r\n          <input\r\n            type=\"number\"\r\n            className={styles.input}\r\n            value={colCount}\r\n            id=\"column\"\r\n            onChange={changeCount}\r\n          />\r\n          <button\r\n            className={styles.buttonOk}\r\n            type=\"button\"\r\n            onClick={okCustomClick}\r\n          >\r\n            Ok\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport styles from './highscores.module.scss';\r\nimport type { HighScore } from '../../App';\r\n\r\ntype Props = {\r\n  Data: HighScore[];\r\n};\r\n\r\nexport const HighscoreTable: FC<Props> = ({ Data }) => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.title}>HighScores</div>\r\n      <div>Place/Name/Grid/Time/Moves</div>\r\n      {Data.map((score, index) => {\r\n        return (\r\n          <div key={score.name + score.time.toString()}>\r\n            {index+1}. {score.name} {score.grid} {score.time}s {score.moves}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HighscoreTable;\r\n","import React, { FC } from 'react';\r\nimport styles from './counter.module.scss';\r\n\r\ntype Props = {\r\n  moveCounter: number;\r\n  timeCounter: number;\r\n  showGameTime: boolean;\r\n};\r\n\r\nexport const Counter: FC<Props> = ({\r\n  moveCounter,\r\n  timeCounter,\r\n  showGameTime,\r\n}) => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      {showGameTime ? (\r\n        <div>\r\n          <div className={styles.text}>Total Moves: {moveCounter} </div>\r\n          <div className={styles.text}>Game Time: {timeCounter} s</div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className={styles.text}>Total Moves: 0 </div>\r\n          <div className={styles.text}>Game Time: 0 s</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React, { FC } from 'react';\r\nimport styles from './game-in-progress.module.scss';\r\n\r\ntype Props = {\r\n  clickedSetUpGame: () => void;\r\n};\r\n\r\nexport const GameInProgress: FC<Props> = ({ clickedSetUpGame }) => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>Good Luck and Have Fun!</div>\r\n      <button\r\n        className={styles.button}\r\n        type=\"button\"\r\n        onClick={clickedSetUpGame}\r\n      >\r\n        Give Up and Set Up New Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameInProgress;\r\n","import React, { FC } from 'react';\r\nimport styles from './intro-header.module.scss';\r\n\r\ntype Props = {\r\n  rowCount: number;\r\n  colCount: number;\r\n  startGameClick: () => void;\r\n  choseLevelClick: () => void;\r\n};\r\n\r\nexport const IntroHeader: FC<Props> = ({\r\n  colCount,\r\n  rowCount,\r\n  startGameClick,\r\n  choseLevelClick,\r\n}) => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <span>Welcome to Memory Game! </span>\r\n      <div className={styles.title}>\r\n        You are going to play{' '}\r\n        <span className={styles.extraTitle}>\r\n          {rowCount} x {colCount}\r\n        </span>{' '}\r\n        size game! Are You ready to start?\r\n      </div>\r\n      <button\r\n        className={`${styles.button} ${styles.buttonStart}`}\r\n        type=\"button\"\r\n        onClick={startGameClick}\r\n      >\r\n        Start Playin\r\n      </button>\r\n      <button className={styles.button} type=\"button\" onClick={choseLevelClick}>\r\n        Change Dificulty{' '}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IntroHeader;\r\n","import React, { FC } from 'react';\r\nimport styles from './finish-game.module.scss';\r\n\r\ntype Props = {\r\n  time: number;\r\n  moves: number;\r\n  clickedSave: () => void;\r\n  clickedReturn: () => void;\r\n  inputFieldRef: React.MutableRefObject<null>;\r\n};\r\n\r\nexport const FinishGame: FC<Props> = ({\r\n  time,\r\n  moves,\r\n  clickedReturn,\r\n  clickedSave,\r\n  inputFieldRef,\r\n}) => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.content}>\r\n        <span>Congratulations!</span>\r\n        <span>You Finished the game!</span>\r\n        <span>Game time: {time} s</span>\r\n        <span>Moves: {moves}</span>\r\n        <div className={styles.smallWrapper}>\r\n          <span className={styles.smallText}>\r\n            Enter Your name and save result\r\n          </span>\r\n          <input\r\n            ref={inputFieldRef}\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"\"\r\n            id=\"\"\r\n          />\r\n          <button\r\n            className={styles.saveButton}\r\n            onClick={clickedSave}\r\n            type=\"button\"\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n        <button\r\n          className={styles.bigButton}\r\n          onClick={clickedReturn}\r\n          type=\"button\"\r\n        >\r\n          Return without saving\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinishGame;\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Card } from './components/card/card';\nimport { ChoseLevel } from './components/chose-level/chose-level';\nimport { HighscoreTable } from './components/highscores/highscores';\nimport { Counter } from './components/counter/counter';\nimport { GameInProgress } from './components/game-in-progress/game-in-progress';\nimport { IntroHeader } from './components/intro-header/into-header';\nimport { FinishGame } from './components/finish-game/finish-game';\n\nlet firstClickedIndex = 0;\nlet secondClickedIndex = 0;\nlet firstClickedPairIdentificator: number | undefined = 0;\nlet secondClickedPairIdentificator: number | undefined = 1;\nlet gameCards: CardData[] = []; // masīvs ar visām kartiņam, kurš sākumā tukšs\nlet fieldSize: number = 1;\nlet movesCount: number = 0;\nlet gameTimeFinish: number = 0;\nlet savedName = 'Unknown';\n\ntype CardData = {\n  id: string; // unikāls identifikators katrai kartītei. tiks izmantots priekš key, kad renderēs. varēja arī šeit nemaz nelikt...\n  pairID: number | undefined; // šis katrām divām kartītēm būs vienāds. tiks izmantots, lai paŗbaudītu, vai noclickotās\n  // kartītes ir vienādas un arī zīmējot html šis numurs nodrošinās to, ka tām ir vienādas bildes izmainot bildes source linku\n  imgSide: boolean; // pēc šī app zinās, vai vajag šo kartīti atvērtu vai aizvērtu zīmēt\n};\n\nexport type HighScore = {\n  name: string;\n  grid: string;\n  time: number;\n  moves: number;\n};\n\nconst MemoryApp = () => {\n  const [clickedFirstCard, setClickedFirstCard] = useState(true);\n  const [rowCount, setRowCount] = useState(2);\n  const [columnCount, setColumnCount] = useState(2);\n  const [showChooseLevelWindow, setShowChooseLevelWindow] = useState(false);\n  const [showCustomLevelInputs, setShowCustomLevelInputs] = useState(false);\n  const [showGameField, setShowGameField] = useState(false);\n  const [showIntroHeader, setShowIntroHeader] = useState(true);\n  const [showGameInProgressHeader, setShowGameInProgressHeader] = useState(\n    false\n  );\n  const [counter, setCounter] = useState(0);\n  const [showFinishGameWindow, setShowFinishGameWindow] = useState(false);\n  const [highScores, setHighScores] = useState<HighScore[]>([]);\n\n  const saveNameInputField = useRef(null);\n\n  // Nodrošina taimera darbību. ne līdz galam skaidrs, kopēts risinājums...\n  useEffect(() => {\n    const timer = setInterval(() => setCounter(counter + 1), 1000);\n    return () => clearInterval(timer);\n  }, [counter]);\n\n  // Nodrošina random spēles kartiņu ģenerāciju atbilstoši prasītajiem izmēriem\n  useEffect(() => {\n    fieldSize = rowCount * columnCount; // Kopējais kartiņu daudzums\n    if (fieldSize % 2) fieldSize -= 1; // Tam jābūt pāra skaitlim\n    const pairIDsArray: number[] = []; // masīvs, kur būs kartiņu dublikātu skaitļi/atradēji\n    for (let i = 0; i < fieldSize / 2; i += 1) {\n      pairIDsArray.push(i);\n      pairIDsArray.push(i);\n    }\n\n    let tempPairIDindex;\n    let tempHelperNumber = fieldSize;\n    gameCards = [];\n    // Aizpilda tukšo kartiņu masīvu random secībā\n    for (let i = 0; i < fieldSize; i += 1) {\n      tempPairIDindex = Math.floor(Math.random() * tempHelperNumber);\n      gameCards.push({\n        id: uuidv4(),\n        pairID: pairIDsArray[tempPairIDindex],\n        imgSide: false,\n      });\n      tempHelperNumber -= 1;\n      pairIDsArray.splice(tempPairIDindex, 1);\n    }\n  }, [rowCount, columnCount, showGameField]);\n\n  const fieldSizeChangeInputHandler = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.id === 'row') {\n      setRowCount(parseInt(event.target.value, 10));\n    } else {\n      setColumnCount(parseInt(event.target.value, 10));\n    }\n  };\n\n  const clickCardHandler = (clickedCard: CardData, index: number) => {\n    movesCount += 1;\n    if (clickedFirstCard) {\n      // Pārbauda, vai iepriekšējā ciklā abas atvērtās kārtis nebija vienādas.\n      // Šis nodrošina to, ka pēdējās atvērtās kārtis stāv vaļā tik ilgi,kamēr tiek nospiests jauns click.\n      if (secondClickedPairIdentificator !== firstClickedPairIdentificator) {\n        gameCards[secondClickedIndex].imgSide = false;\n        gameCards[firstClickedIndex].imgSide = false;\n      }\n      gameCards[index].imgSide = true;\n      firstClickedPairIdentificator = clickedCard.pairID;\n      firstClickedIndex = index;\n      setClickedFirstCard(false);\n    } else {\n      gameCards[index].imgSide = true;\n      secondClickedPairIdentificator = clickedCard.pairID;\n      secondClickedIndex = index;\n      setClickedFirstCard(true);\n    }\n    // Game Finish\n    if (!gameCards.some((card) => !card.imgSide)) {\n      gameTimeFinish = counter;\n      setShowFinishGameWindow(true);\n    }\n  };\n\n  const ChoseLevelHandler = (event: React.MouseEvent<HTMLElement>) => {\n    // @ts-ignore\n    const buttonID = event.target.id;\n    if (buttonID !== '0') {\n      const count = parseInt(buttonID, 10);\n      setRowCount(count);\n      setColumnCount(count);\n      setShowCustomLevelInputs(false);\n      setShowChooseLevelWindow(false);\n      setShowGameField(false);\n      setShowIntroHeader(true);\n    } else {\n      setShowCustomLevelInputs(true);\n    }\n  };\n\n  const startNewGame = () => {\n    setCounter(0);\n    fieldSize = 1;\n    movesCount = 0;\n    setClickedFirstCard(true);\n    setShowGameField(true);\n    setShowGameInProgressHeader(true);\n    setShowIntroHeader(false);\n  };\n\n  const saveDataFinishedGame = () => {\n    setShowIntroHeader(true);\n    setShowGameField(false);\n    setShowFinishGameWindow(false);\n    // @ts-ignore\n    savedName = saveNameInputField.current.value;\n    const updated = [\n      ...highScores,\n      {\n        name: savedName,\n        grid: `${rowCount}x${columnCount}`,\n        time: gameTimeFinish,\n        moves: movesCount,\n      },\n    ];\n    updated.sort((prev, next) => {\n      if (prev.time < next.time) return -1;\n      return 1;\n    });\n\n    setHighScores(updated);\n  };\n  // Izrēķina gridu laukumam\n  const flexBasisValue = `${100 / columnCount}%`;\n\n  return (\n    <div className=\"main-app\">\n      {showFinishGameWindow && (\n        <FinishGame\n          time={gameTimeFinish}\n          moves={movesCount}\n          inputFieldRef={saveNameInputField}\n          clickedReturn={() => {\n            setShowIntroHeader(true);\n            setShowGameField(false);\n            setShowFinishGameWindow(false);\n          }}\n          clickedSave={saveDataFinishedGame}\n        />\n      )}\n      <div className=\"sideBar\">\n        <Counter\n          moveCounter={movesCount}\n          timeCounter={counter}\n          showGameTime={showGameField}\n        />\n        <HighscoreTable\n          Data={\n            highScores.length > 0\n              ? highScores\n              : [{ name: '---', grid: '---', time: 999, moves: 999 }]\n          }\n        />\n      </div>\n      <div className=\"header\">\n        {showIntroHeader && (\n          <IntroHeader\n            rowCount={rowCount}\n            colCount={columnCount}\n            choseLevelClick={() => {\n              setShowChooseLevelWindow(true);\n              setShowIntroHeader(false);\n            }}\n            startGameClick={startNewGame}\n          />\n        )}\n        {showChooseLevelWindow && (\n          <ChoseLevel\n            ClickOnThis={ChoseLevelHandler}\n            customWindow={showCustomLevelInputs}\n            changeCount={fieldSizeChangeInputHandler}\n            rowCount={rowCount}\n            colCount={columnCount}\n            okCustomClick={() => {\n              setShowCustomLevelInputs(false);\n              setShowChooseLevelWindow(false);\n              setShowGameField(false);\n              setShowIntroHeader(true);\n            }}\n          />\n        )}\n        {showGameInProgressHeader && (\n          <GameInProgress\n            clickedSetUpGame={() => {\n              setShowIntroHeader(true);\n              setShowGameInProgressHeader(false);\n              setShowGameField(false);\n            }}\n          />\n        )}\n      </div>\n      {showGameField ? (\n        <div className=\"row gameField\">\n          {gameCards.map((card, index) => {\n            return (\n              <div\n                key={card.id}\n                className=\"fieldColumn\"\n                style={{ flexBasis: flexBasisValue }}\n              >\n                <Card\n                  isDisabled={card.imgSide}\n                  clickOnCard={() => clickCardHandler(card, index)}\n                  showImage={card.imgSide}\n                  // @ts-ignore\n                  imgID={card.pairID}\n                />\n              </div>\n            );\n          })}\n        </div>\n      ) : (\n        <div className=\"GameFieldBackGround\" />\n      )}\n    </div>\n  );\n};\n\nexport default MemoryApp;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './flexbox-grid.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}