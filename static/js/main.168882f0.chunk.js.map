{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["topMsg","TodoApp","useState","tasks","setTasks","inputTask","setInputTask","error","setError","className","type","onClick","value","onChange","event","target","text","isFinished","edit","editText","show","newTasks","i","length","map","task","index","editFieldChangeHandler","saveEditedTask","cancelEditingText","id","checked","checkboxChangeHandler","htmlFor","editTask","splice","deleteTask","copyTask","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.168882f0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { forEachChild } from 'typescript';\nimport './App.css';\n\ntype Task = {\n  text: string;\n  isFinished: boolean;\n  edit: boolean;\n  editText: string;\n  show: boolean;\n};\n\nconst topMsg = 'Ievadi darāmo darbiņu!!!';\n\nconst TodoApp = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [inputTask, setInputTask] = useState('');\n  const [error, setError] = useState<string[]>([topMsg]);\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputTask(event.target.value);\n  };\n\n  const editFieldChangeHandler = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    index: number\n  ) => {\n    const newTasks = [...tasks];\n    newTasks[index].editText = event.target.value;\n    setTasks(newTasks);\n  };\n\n  const addTaskButtonClickHandler = () => {\n    if (inputTask !== '') {\n      setTasks([\n        ...tasks,\n        {\n          text: inputTask,\n          isFinished: false,\n          edit: false,\n          editText: '',\n          show: true,\n        },\n      ]);\n      setInputTask('');\n      setError([topMsg]);\n    } else {\n      setError([\"Neatstāj tukšu pirms spied 'Add Task Pogu' pogu\", 'X']);\n    }\n  };\n\n  // const copyTask = (index: number) => {\n  //   const newTasks = [...tasks, {\n  //     text: tasks[index].text,\n  //     isFinished: tasks[index].isFinished,\n  //     edit: tasks[index].edit,\n  //     editText: tasks[index].editText,\n  //   }];\n  //   setTasks(newTasks);\n  // };\n\n  const copyTask = (index: number) => {\n    const newTasks = [...tasks, tasks[index]];\n    setTasks(newTasks);\n  };\n\n  const checkboxChangeHandler = (index: number) => {\n    const newTasks = [...tasks];\n    newTasks[index].isFinished = !newTasks[index].isFinished;\n    setTasks(newTasks);\n  };\n\n  const deleteTask = (index: number) => {\n    tasks.splice(index, 1);\n    setTasks([...tasks]);\n  };\n\n  const editTask = (index: number) => {\n    const newTasks = [...tasks];\n    newTasks[index].edit = !newTasks[index].edit;\n    newTasks[index].editText = newTasks[index].text;\n    setTasks(newTasks);\n  };\n\n  const saveEditedTask = (index: number) => {\n    const newTasks = [...tasks];\n    newTasks[index].edit = !newTasks[index].edit;\n    newTasks[index].text = newTasks[index].editText;\n    newTasks[index].editText = '';\n    setTasks(newTasks);\n  };\n\n  const cancelEditingText = (index: number) => {\n    const newTasks = [...tasks];\n    newTasks[index].edit = !newTasks[index].edit;\n    setTasks(newTasks);\n  };\n\n  const showCompleted = () => {\n    const newTasks = [...tasks];\n    for (let i = 0; i < tasks.length; i++) {\n      if (newTasks[i].isFinished) {\n        newTasks[i].show = true;\n      } else {\n        newTasks[i].show = false;\n      }\n    }\n    setTasks(newTasks);\n  };\n\n  const showMustDo = () => {\n    const newTasks = [...tasks];\n    for (let i = 0; i < tasks.length; i++) {\n      if (newTasks[i].isFinished) {\n        newTasks[i].show = false;\n      } else {\n        newTasks[i].show = true;\n      }\n    }\n    setTasks(newTasks);\n  };\n\n  const showAll = () => {\n    const newTasks = [...tasks];\n    for (let i = 0; i < tasks.length; i++) {\n      newTasks[i].show = true;\n    }\n    setTasks(newTasks);\n  };\n\n  // const newTasks = tasks.map(task => {\n  //   if (task.isFinished){\n  //     task.show = true;\n  //   } else {\n  //     task.show = false;\n  //   }\n  //   return task;\n  // });\n\n  return (\n    <div className=\"todo-app\">\n      <h3 className=\"todo__error-msg\">\n        {error[0]}{' '}\n        <button\n          type=\"button\"\n          className=\"todo__error-cancel\"\n          onClick={() => setError([topMsg])}\n        >\n          {error[1]}\n        </button>\n      </h3>\n      <input type=\"text\" value={inputTask} onChange={inputChangeHandler} />\n      <button type=\"button\" onClick={addTaskButtonClickHandler}>\n        Add New Task\n      </button>\n      <button type=\"button\" onClick={showCompleted}>\n        Show Completed\n      </button>\n      <button type=\"button\" onClick={showMustDo}>Show Must Do </button>\n      <button type=\"button\" onClick={showAll}>Show All</button>\n      <button type=\"button\" onClick={() => setTasks([])}>\n        Delete All\n      </button>\n      <div>\n        {tasks.map((task, index) => (\n          <div key={index.toString()} className=\"todo__task-output\">\n            {task.show ? (\n              <div>\n                {!task.edit ? (\n                  <div>\n                    <input\n                      id={`${index}`}\n                      checked={task.isFinished}\n                      type=\"checkbox\"\n                      onChange={() => checkboxChangeHandler(index)}\n                    />\n                    <label htmlFor={`${index}`} className=\"todo__task-text\">\n                      {task.text} - {task.isFinished ? 'Done' : 'Must Do'}\n                    </label>\n                    <button type=\"button\" onClick={() => editTask(index)}>\n                      Edit\n                    </button>\n                    <button type=\"button\" onClick={() => deleteTask(index)}>\n                      Delete\n                    </button>\n                    <button type=\"button\" onClick={() => copyTask(index)}>\n                      Copy This Task (DON'T USE)\n                    </button>\n                  </div>\n                ) : (\n                  <div>\n                    <input\n                      type=\"text\"\n                      value={task.editText}\n                      onChange={(event) => editFieldChangeHandler(event, index)}\n                    />\n                    <button type=\"button\" onClick={() => saveEditedTask(index)}>\n                      Save\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => cancelEditingText(index)}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div>-</div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TodoApp;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}