{"version":3,"sources":["components/chose-level/chose-level.module.scss","components/card/card.module.scss","components/highscores/highscores.module.scss","components/counter/counter.module.scss","components/card/card.tsx","components/chose-level/chose-level.tsx","components/highscores/highscores.tsx","components/counter/counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Card","isDisabled","clickOnCard","showImage","imgID","type","className","styles","wrapper","disabled","onClick","img","src","alt","loader","backSide","ChoseLevel","ClickOnThis","customWindow","changeCount","rowCount","colCount","cancelClick","window","title","button","id","customInputsWrapper","value","onChange","HighscoreTable","Counter","firstClickedIndex","secondClickedIndex","firstClickedPairIdentificator","secondClickedPairIdentificator","gameCards","fieldSize","MemoryApp","useState","clickedFirstCard","setClickedFirstCard","setRowCount","columnCount","setColumnCount","helper","setHelper","customLevel","setCustomLevel","useEffect","tempPairIDindex","pairIDsArray","i","push","tempHelperNumber","Math","floor","random","uuidv4","pairID","imgSide","splice","flexBasisValue","event","buttonID","target","count","parseInt","map","card","index","style","flexBasis","clickedCard","clickCardHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,OAAS,4BAA4B,MAAQ,2BAA2B,QAAU,6BAA6B,oBAAsB,yCAAyC,OAAS,8B,iBCAzMD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,QAAU,sBAAsB,IAAM,kBAAkB,SAAW,uBAAuB,OAAS,qBAAqB,KAAO,qB,kBCA3KD,EAAOC,QAAU,CAAC,QAAU,8B,gBCA5BD,EAAOC,QAAU,CAAC,QAAU,2B,+LCSfC,EAAkB,SAAC,GAKzB,IAJLC,EAII,EAJJA,WACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,UACAC,EACI,EADJA,MAEA,OACE,wBACEC,KAAK,SACLC,UAAWC,IAAOC,QAClBC,SAAUR,EACVS,QAASR,EAJX,SAMGC,EACC,qCACE,qBACEG,UAAWC,IAAOI,IAClBC,IAAG,mCAAsC,EAARR,EAAY,EAA1C,YACHS,IAAG,2BAAiBT,KAEtB,qBAAKE,UAAWC,IAAOO,OAAvB,kBAGF,qBAAKR,UAAWC,IAAOQ,c,gBCrBlBC,EAAwB,SAAC,GAO/B,IANLC,EAMI,EANJA,YACAC,EAKI,EALJA,aACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SACAC,EACI,EADJA,YAEA,OACE,sBAAKhB,UAAWC,IAAOgB,OAAvB,UACE,qBAAKjB,UAAWC,IAAOiB,MAAvB,8BACA,sBAAKlB,UAAWC,IAAOC,QAAvB,UACE,wBACEF,UAAWC,IAAOkB,OAClBC,GAAG,IACHrB,KAAK,SACLK,QAASO,EAJX,sBAQA,wBACEX,UAAWC,IAAOkB,OAClBC,GAAG,IACHrB,KAAK,SACLK,QAASO,EAJX,wBAQA,wBACEX,UAAWC,IAAOkB,OAClBC,GAAG,IACHrB,KAAK,SACLK,QAASO,EAJX,sBAQA,wBACEX,UAAWC,IAAOkB,OAClBC,GAAG,IACHrB,KAAK,SACLK,QAASO,EAJX,uBASDC,GACC,sBAAKZ,UAAWC,IAAOoB,oBAAvB,UACE,mDACA,uBACEtB,KAAK,SACLC,UAAU,QACVsB,MAAOR,EACPM,GAAG,MACHG,SAAUV,IAEZ,qDACA,uBACEd,KAAK,SACLC,UAAU,QACVsB,MAAOP,EACPK,GAAG,SACHG,SAAUV,IAEZ,wBAAQd,KAAK,SAASK,QAASY,EAA/B,2B,gBCtEGQ,EAA4B,WACvC,OACE,qBAAKxB,UAAWC,IAAOC,QAAvB,SACE,8E,gBCHOuB,EAAqB,WAChC,OACE,qBAAKzB,UAAWC,IAAOC,QAAvB,SACE,uGCCFwB,EAAoB,EACpBC,EAAqB,EACrBC,EAAoD,EACpDC,EAAqD,EACrDC,EAAwB,GASxBC,EAAoB,EA4HTC,EA1HG,WAAO,IAAD,EAC0BC,oBAC9C,GAFoB,mBACfC,EADe,KACGC,EADH,OAIUF,mBAAiB,GAJ3B,mBAIfnB,EAJe,KAILsB,EAJK,OAKgBH,mBAAiB,GALjC,mBAKfI,EALe,KAKFC,EALE,OAMML,oBAAkB,GANxB,mBAMfM,EANe,KAMPC,EANO,OAOcP,oBAAkB,GAPhC,gCAQgBA,oBAAkB,IARlC,mBAQfQ,EARe,KAQFC,EARE,OASoBT,oBAAkB,GATtC,6BAWtBU,qBAAU,YACRZ,EAAYjB,EAAWuB,GACP,IAAGN,GAAa,GAEhC,IADA,IAMIa,EANEC,EAAyB,GACtBC,EAAI,EAAGA,EAAIf,EAAY,EAAGe,GAAK,EACtCD,EAAaE,KAAKD,GAClBD,EAAaE,KAAKD,GAIpB,IAAIE,EAAmBjB,EACvBD,EAAY,GAEZ,IAAK,IAAIgB,EAAI,EAAGA,EAAIf,EAAWe,GAAK,EAClCF,EAAkBK,KAAKC,MAAMD,KAAKE,SAAWH,GAC7ClB,EAAUiB,KAAK,CACb3B,GAAIgC,cACJC,OAAQR,EAAaD,GACrBU,SAAS,IAEXN,GAAoB,EACpBH,EAAaU,OAAOX,EAAiB,GAEvCJ,GAAWD,KACV,CAACzB,EAAUuB,IAEd,IA4CMmB,EAAc,UAAM,IAAMnB,EAAZ,KAEpB,OACE,sBAAKrC,UAAU,WAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEF,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CACEW,YAxBkB,SAAC8C,GAEzB,IAAMC,EAAWD,EAAME,OAAOvC,GAC9B,GAAiB,MAAbsC,EAAkB,CACpB,IAAME,EAAQC,SAASH,EAAU,IACjCtB,EAAYwB,GACZtB,EAAesB,GACflB,GAAe,QAEfA,GAAe,IAgBX9B,aAAc6B,EACd5B,YAxD4B,SAClC4C,GAEwB,QAApBA,EAAME,OAAOvC,GACfgB,EAAYyB,SAASJ,EAAME,OAAOrC,MAAO,KAEzCgB,EAAeuB,SAASJ,EAAME,OAAOrC,MAAO,MAmDxCR,SAAUA,EACVC,SAAUsB,EACVrB,YAAa,kBAAM0B,GAAe,QAGtC,qBAAK1C,UAAU,gBAAf,SACG8B,EAAUgC,KAAI,SAACC,EAAMC,GACpB,OACE,qBAEEhE,UAAU,cACViE,MAAO,CAAEC,UAAWV,GAHtB,SAKE,cAAC,EAAD,CACE7D,WAAYoE,EAAKT,QACjB1D,YAAa,kBA9DF,SAACuE,EAAuBH,GAC3C9B,GAGEL,IAAmCD,IACrCE,EAAUH,GAAoB2B,SAAU,EACxCxB,EAAUJ,GAAmB4B,SAAU,GAEzCxB,EAAUkC,GAAOV,SAAU,EAC3B1B,EAAgCuC,EAAYd,OAC5C3B,EAAoBsC,EACpB7B,GAAoB,KAEpBL,EAAUkC,GAAOV,SAAU,EAC3BzB,EAAiCsC,EAAYd,OAC7C1B,EAAqBqC,EACrB7B,GAAoB,IA8CSiC,CAAiBL,EAAMC,IAC1CnE,UAAWkE,EAAKT,QAEhBxD,MAAOiE,EAAKV,UATTU,EAAK3C,aCjHTiD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d6323d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"window\":\"chose-level_window__3SmUC\",\"title\":\"chose-level_title__3YUMZ\",\"wrapper\":\"chose-level_wrapper__8NjXC\",\"customInputsWrapper\":\"chose-level_customInputsWrapper__28WKX\",\"button\":\"chose-level_button__gslc6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__3KLxa\",\"wrapper\":\"card_wrapper__rNoad\",\"img\":\"card_img__2fUjj\",\"backSide\":\"card_backSide__1yzn1\",\"loader\":\"card_loader__2uh2I\",\"spin\":\"card_spin__3x2-C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"highscores_wrapper__3aTmG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"counter_wrapper__3-z-f\"};","import React, { FC } from 'react';\r\nimport styles from './card.module.scss';\r\n\r\ntype Props = {\r\n  isDisabled: boolean;\r\n  clickOnCard: () => void;\r\n  showImage: boolean;\r\n  imgID: number;\r\n};\r\n\r\nexport const Card: FC<Props> = ({\r\n  isDisabled,\r\n  clickOnCard,\r\n  showImage,\r\n  imgID,\r\n}) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={styles.wrapper}\r\n      disabled={isDisabled}\r\n      onClick={clickOnCard}\r\n    >\r\n      {showImage ? (\r\n        <>\r\n          <img\r\n            className={styles.img}\r\n            src={`https://picsum.photos/id/${imgID * 2 + 2}/250/250`}\r\n            alt={`Attēls Nr:  ${imgID}`}\r\n          />\r\n          <div className={styles.loader}> </div>\r\n        </>\r\n      ) : (\r\n        <div className={styles.backSide} />\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { FC } from 'react';\r\nimport styles from './chose-level.module.scss';\r\n\r\ntype Props = {\r\n  ClickOnThis: (event: React.MouseEvent<HTMLElement>) => void;\r\n  customWindow: boolean;\r\n  changeCount: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  rowCount: number;\r\n  colCount: number;\r\n  cancelClick: () => void;\r\n};\r\n\r\nexport const ChoseLevel: FC<Props> = ({\r\n  ClickOnThis,\r\n  customWindow,\r\n  changeCount,\r\n  rowCount,\r\n  colCount,\r\n  cancelClick,\r\n}) => {\r\n  return (\r\n    <div className={styles.window}>\r\n      <div className={styles.title}>Choose Dificulty</div>\r\n      <div className={styles.wrapper}>\r\n        <button\r\n          className={styles.button}\r\n          id=\"4\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Easy 4x4\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          id=\"6\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Medium 6x6\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          id=\"8\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Hard 8x8\r\n        </button>\r\n        <button\r\n          className={styles.button}\r\n          id=\"0\"\r\n          type=\"button\"\r\n          onClick={ClickOnThis}\r\n        >\r\n          Custom\r\n        </button>\r\n      </div>\r\n      {customWindow && (\r\n        <div className={styles.customInputsWrapper}>\r\n          <span> Rindu skaits: </span>\r\n          <input\r\n            type=\"number\"\r\n            className=\"input\"\r\n            value={rowCount}\r\n            id=\"row\"\r\n            onChange={changeCount}\r\n          />\r\n          <span> Kolonnu skaits: </span>\r\n          <input\r\n            type=\"number\"\r\n            className=\"input\"\r\n            value={colCount}\r\n            id=\"column\"\r\n            onChange={changeCount}\r\n          />\r\n          <button type=\"button\" onClick={cancelClick}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport styles from './highscores.module.scss';\r\n\r\ntype Props = {};\r\n\r\nexport const HighscoreTable: FC<Props> = () => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>TE IR HIGHSCORES!!!!! (work in progress)</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HighscoreTable;\r\n","import React, { FC } from 'react';\r\nimport styles from './counter.module.scss';\r\n\r\ntype Props = {};\r\n\r\nexport const Counter: FC<Props> = () => {\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>TE BŪS LAIKA UN MOVES SKATĪTĀJS (work in progress)</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React, { useState, useEffect } from 'react';\n// import { forEachChild } from 'typescript';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Card } from './components/card/card';\nimport { ChoseLevel } from './components/chose-level/chose-level';\nimport { HighscoreTable } from './components/highscores/highscores';\nimport { Counter } from './components/counter/counter';\n\nlet firstClickedIndex = 0;\nlet secondClickedIndex = 0;\nlet firstClickedPairIdentificator: number | undefined = 0;\nlet secondClickedPairIdentificator: number | undefined = 1;\nlet gameCards: CardData[] = []; // masīvs ar visām kartiņam, kurš sākumā tukšs\n\ntype CardData = {\n  id: string; // unikāls identifikators katrai kartītei. tiks izmantots priekš key, kad renderēs. varēja arī šeit nemaz nelikt...\n  pairID: number | undefined; // šis katrām divām kartītēm būs vienāds. tiks izmantots, lai paŗbaudītu, vai noclickotās\n  // kartītes ir vienādas un arī zīmējot html šis numurs nodrošinās to, ka tām ir vienādas bildes izmainot bildes source linku\n  imgSide: boolean; // pēc šī app zinās, vai vajag šo kartīti atvērtu vai aizvērtu zīmēt\n};\n\nlet fieldSize: number = 1;\n\nconst MemoryApp = () => {\n  const [clickedFirstCard, setClickedFirstCard] = useState<boolean | undefined>(\n    true\n  );\n  const [rowCount, setRowCount] = useState<number>(4);\n  const [columnCount, setColumnCount] = useState<number>(4);\n  const [helper, setHelper] = useState<boolean>(false);\n  const [choseLevel, setChoseLevel] = useState<boolean>(false);\n  const [customLevel, setCustomLevel] = useState<boolean>(false);\n  const [showGameField, setShowGameField] = useState<boolean>(false);\n\n  useEffect(() => {\n    fieldSize = rowCount * columnCount; // Kopējais kartiņu daudzums\n    if (fieldSize % 2) fieldSize -= 1; // Tam jābūt pāra skaitlim\n    const pairIDsArray: number[] = []; // masīvs, kur būs kartiņu dublikātu skaitļi/atradēji\n    for (let i = 0; i < fieldSize / 2; i += 1) {\n      pairIDsArray.push(i);\n      pairIDsArray.push(i);\n    }\n\n    let tempPairIDindex;\n    let tempHelperNumber = fieldSize;\n    gameCards = [];\n    // Aizpilda tukšo kartiņu masīvu random secībā\n    for (let i = 0; i < fieldSize; i += 1) {\n      tempPairIDindex = Math.floor(Math.random() * tempHelperNumber);\n      gameCards.push({\n        id: uuidv4(),\n        pairID: pairIDsArray[tempPairIDindex],\n        imgSide: false,\n      });\n      tempHelperNumber -= 1;\n      pairIDsArray.splice(tempPairIDindex, 1);\n    }\n    setHelper(!helper);\n  }, [rowCount, columnCount]);\n\n  const fieldSizeChangeInputHandler = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.id === 'row') {\n      setRowCount(parseInt(event.target.value, 10));\n    } else {\n      setColumnCount(parseInt(event.target.value, 10));\n    }\n  };\n\n  const clickCardHandler = (clickedCard: CardData, index: number) => {\n    if (clickedFirstCard) {\n      // Pārbauda, vai iepriekšējā ciklā abas atvērtās kārtis nebija vienādas.\n      // Šis nodrošina to, ka pēdējās atvērtās kārtis stāv vaļā tik ilgi,kamēr tiek nospiests jauns click.\n      if (secondClickedPairIdentificator !== firstClickedPairIdentificator) {\n        gameCards[secondClickedIndex].imgSide = false;\n        gameCards[firstClickedIndex].imgSide = false;\n      }\n      gameCards[index].imgSide = true;\n      firstClickedPairIdentificator = clickedCard.pairID;\n      firstClickedIndex = index;\n      setClickedFirstCard(false);\n    } else {\n      gameCards[index].imgSide = true;\n      secondClickedPairIdentificator = clickedCard.pairID;\n      secondClickedIndex = index;\n      setClickedFirstCard(true);\n    }\n  };\n\n  const ChoseLevelHandler = (event: React.MouseEvent<HTMLElement>) => {\n    // @ts-ignore\n    const buttonID = event.target.id;\n    if (buttonID !== '0') {\n      const count = parseInt(buttonID, 10);\n      setRowCount(count);\n      setColumnCount(count);\n      setCustomLevel(false);\n    } else {\n      setCustomLevel(true);\n    }\n  };\n\n  // Izrēķina gridu laukumam\n  const flexBasisValue = `${100 / columnCount}%`;\n\n  return (\n    <div className=\"main-app\">\n      <div className=\"sideBar\">\n        <Counter />\n        <HighscoreTable />\n      </div>\n      <div className=\"header\">\n        <ChoseLevel\n          ClickOnThis={ChoseLevelHandler}\n          customWindow={customLevel}\n          changeCount={fieldSizeChangeInputHandler}\n          rowCount={rowCount}\n          colCount={columnCount}\n          cancelClick={() => setCustomLevel(false)}\n        />\n      </div>\n      <div className=\"row gameField\">\n        {gameCards.map((card, index) => {\n          return (\n            <div\n              key={card.id}\n              className=\"fieldColumn\"\n              style={{ flexBasis: flexBasisValue }}\n            >\n              <Card\n                isDisabled={card.imgSide}\n                clickOnCard={() => clickCardHandler(card, index)}\n                showImage={card.imgSide}\n                // @ts-ignore\n                imgID={card.pairID}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryApp;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './flexbox-grid.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}