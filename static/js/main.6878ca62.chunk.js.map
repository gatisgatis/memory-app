{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["firstClickedIndex","firstClickedPairIdentificator","gameCards","MemoryApp","useState","clickedFirstCard","setClickedFirstCard","rowCount","setRowCount","columnCount","setColumnCount","fieldSizeChangeInputHandler","event","target","id","parseInt","value","console","log","z","tempPairIDindex","pairIDsArray","i","push","tempHelperNumber","Math","floor","random","uuidv4","pairID","imgSide","splice","flexBasisValue","gameFieldWidth","className","type","onChange","style","width","map","card","index","flexBasis","disabled","onClick","clickedCard","undefined","setTimeout","clickCardHandler","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAMIA,EAAoB,EACpBC,EAAoD,EACpDC,EAAwB,GAsIbC,EA7HG,WAAO,IAAD,EAC0BC,oBAC9C,GAFoB,mBACfC,EADe,KACGC,EADH,OAIUF,mBAAiB,GAJ3B,mBAIfG,EAJe,KAILC,EAJK,OAKgBJ,mBAAiB,GALjC,mBAKfK,EALe,KAKFC,EALE,KAQhBC,EAA8B,SAClCC,GAEwB,QAApBA,EAAMC,OAAOC,IACfN,EAAYO,SAASH,EAAMC,OAAOG,MAAO,KACzCC,QAAQC,IAAI,kBAAmBH,SAASH,EAAMC,OAAOG,MAAO,KAC5DC,QAAQC,IAAI,wBAAyBX,KAErCG,EAAeK,SAASH,EAAMC,OAAOG,MAAO,KAC5CC,QAAQC,IAAI,qBAAsBH,SAASH,EAAMC,OAAOG,MAAO,KAC/DC,QAAQC,IAAI,2BAA4BT,IAE1C,IAAIU,EAAIZ,EAAWE,EACfU,EAAI,IAAGA,GAAK,GAChBF,QAAQC,IAAIC,GAEZ,IADA,IAMIC,EANEC,EAAyB,GACtBC,EAAI,EAAGA,EAAIH,EAAI,EAAGG,GAAK,EAC9BD,EAAaE,KAAKD,GAClBD,EAAaE,KAAKD,GAIpB,IAAIE,EAAmBL,EACvBjB,EAAY,GAEZ,IAAK,IAAIoB,EAAI,EAAGA,EAAIH,EAAGG,GAAK,EAC1BF,EAAkBK,KAAKC,MAAMD,KAAKE,SAAWH,GAC7CtB,EAAUqB,KAAK,CACbT,GAAIc,cACJC,OAAQR,EAAaD,GACrBU,SAAS,IAEXN,GAAoB,EACpBH,EAAaU,OAAOX,EAAiB,IAyBnCY,EAAc,UAAM,IAAMvB,EAAZ,KACdwB,EAAc,UAAM,IAAN,MAEpB,OACE,sBAAKC,UAAU,WAAf,UACE,gCACE,mDACA,uBACEC,KAAK,SACLD,UAAU,QACVlB,MAAOT,EACPO,GAAG,MACHsB,SAAUzB,IAEZ,qDACA,uBACEwB,KAAK,SACLD,UAAU,QACVlB,MAAOP,EACPK,GAAG,SACHsB,SAAUzB,OAGd,uBACA,qBAAKuB,UAAU,gBAAgBG,MAAO,CAAEC,MAAOL,GAA/C,SACG/B,EAAUqC,KAAI,SAACC,EAAMC,GACpB,OACE,qBAAmBJ,MAAO,CAAEK,UAAWV,GAAvC,SACE,wBACEG,KAAK,SACLD,UAAU,SACVS,SAAUH,EAAKV,QACfc,QAAS,kBArDE,SAACC,EAAuBJ,GAC3CpC,GACFH,EAAUuC,GAAOX,SAAU,EAC3B7B,EAAgC4C,EAAYhB,OAC5C7B,EAAoByC,EACpBnC,GAAoB,KAEpBJ,EAAUuC,GAAOX,SAAU,EAC3BxB,OAAoBwC,GACpBC,YAAW,WAELF,EAAYhB,SAAW5B,IACzBC,EAAUuC,GAAOX,SAAU,EAC3B5B,EAAUF,GAAmB8B,SAAU,GAEzCxB,GAAoB,KACnB,MAqCsB0C,CAAiBR,EAAMC,IAJxC,SAMGD,EAAKV,QACJ,8BACE,qBACEI,UAAU,MACVe,IAAG,mCAEDT,EAAKX,OAAS,GAFb,YAIHqB,IAAI,WAIR,8BACE,iDApBEV,EAAK1B,aChGZqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6878ca62.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import { forEachChild } from 'typescript';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n// import Card from './components/card/card';\n\nlet firstClickedIndex = 0;\nlet firstClickedPairIdentificator: number | undefined = 0;\nlet gameCards: CardData[] = []; // masīvs ar visām kartiņam, kurš sākumā tukšs\n\ntype CardData = {\n  id: string; // unikāls identifikators katrai kartītei. tiks izmantots priekš key, kad renderēs. varēja arī šeit nemaz nelikt...\n  pairID: number | undefined; // šis katrām divām kartītēm būs vienāds. tiks izmantots, lai paŗbaudītu, vai noclickotās\n  // kartītes ir vienādas un arī zīmējot html šis numurs nodrošinās to, ka tām ir vienādas bildes izmainot bildes source linku\n  imgSide: boolean; // pēc šī app zinās, vai vajag šo kartīti atvērtu vai aizvērtu zīmēt\n};\n\nconst MemoryApp = () => {\n  const [clickedFirstCard, setClickedFirstCard] = useState<boolean | undefined>(\n    true\n  );\n  const [rowCount, setRowCount] = useState<number>(5);\n  const [columnCount, setColumnCount] = useState<number>(5);\n  \n\n  const fieldSizeChangeInputHandler = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (event.target.id === 'row') {\n      setRowCount(parseInt(event.target.value, 10));\n      console.log('input row value', parseInt(event.target.value, 10));\n      console.log('Nomaina row State uz ', rowCount);\n    } else {\n      setColumnCount(parseInt(event.target.value, 10));\n      console.log('input column value', parseInt(event.target.value, 10));\n      console.log('Nomaina column State uz ', columnCount);\n    }\n    let z = rowCount * columnCount; // Kopējais kartiņu daudzums\n    if (z % 2) z -= 1; // Tam jābūt pāra skaitlim\n    console.log(z);\n    const pairIDsArray: number[] = []; // masīvs, kur būs kartiņu pāru skaitļi/atradēji\n    for (let i = 0; i < z / 2; i += 1) {\n      pairIDsArray.push(i);\n      pairIDsArray.push(i);\n    }\n\n    let tempPairIDindex;\n    let tempHelperNumber = z;\n    gameCards = [];\n    // Aizpilda tukšo kartiņu masīvu random secībā\n    for (let i = 0; i < z; i += 1) {\n      tempPairIDindex = Math.floor(Math.random() * tempHelperNumber);\n      gameCards.push({\n        id: uuidv4(),\n        pairID: pairIDsArray[tempPairIDindex],\n        imgSide: false,\n      });\n      tempHelperNumber -= 1;\n      pairIDsArray.splice(tempPairIDindex, 1);\n    }\n  };\n\n  const clickCardHandler = (clickedCard: CardData, index: number) => {\n    if (clickedFirstCard) {\n      gameCards[index].imgSide = true;\n      firstClickedPairIdentificator = clickedCard.pairID;\n      firstClickedIndex = index;\n      setClickedFirstCard(false);\n    } else {\n      gameCards[index].imgSide = true;\n      setClickedFirstCard(undefined);\n      setTimeout(() => {\n        // @ts-ignore\n        if (clickedCard.pairID !== firstClickedPairIdentificator) {\n          gameCards[index].imgSide = false;\n          gameCards[firstClickedIndex].imgSide = false;\n        }\n        setClickedFirstCard(true);\n      }, 1000);\n    }\n  };\n\n  // Izrēķina kartītes platumu un laukuma lielumu kopējo!\n  const flexBasisValue = `${100 / columnCount}%`;\n  const gameFieldWidth = `${1000}px`;\n\n  return (\n    <div className=\"main-app\">\n      <div>\n        <span> Rindu skaits: </span>\n        <input\n          type=\"number\"\n          className=\"input\"\n          value={rowCount}\n          id=\"row\"\n          onChange={fieldSizeChangeInputHandler}\n        />\n        <span> Kolonnu skaits: </span>\n        <input\n          type=\"number\"\n          className=\"input\"\n          value={columnCount}\n          id=\"column\"\n          onChange={fieldSizeChangeInputHandler}\n        />\n      </div>\n      <br />\n      <div className=\"row gameField\" style={{ width: gameFieldWidth }}>\n        {gameCards.map((card, index) => {\n          return (\n            <div key={card.id} style={{ flexBasis: flexBasisValue }}>\n              <button\n                type=\"button\"\n                className=\"wraper\"\n                disabled={card.imgSide}\n                onClick={() => clickCardHandler(card, index)}\n              >\n                {card.imgSide ? (\n                  <div>\n                    <img\n                      className=\"img\"\n                      src={`https://picsum.photos/id/${\n                        // @ts-ignore\n                        card.pairID + 20\n                      }/100/100`}\n                      alt=\"card\"\n                    />\n                  </div>\n                ) : (\n                  <div>\n                    <h3>Aizmugure </h3>\n                  </div>\n                )}\n              </button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryApp;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './flexbox-grid.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}